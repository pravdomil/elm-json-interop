module Sample.Encode exposing (..)

{-| Generated by <https://github.com/pravdomil/Elm-JSON-Interop>.
-}

import Json.Encode as E
import Sample as A
import Sample2.Encode
import Utils.Json.Encode_ as E_ exposing (Encoder)


type0 : Encoder A.Type0
type0 =
    \v1 ->
        case v1 of
            A.Type0 ->
                E.object [ ( "a", E.int 0 ) ]


type1 : Encoder A.Type1
type1 =
    \(A.Type1 v1) -> E.string v1


type2 : Encoder A.Type2
type2 =
    \v1 ->
        case v1 of
            A.Type2 v2 v3 ->
                E.object [ ( "a", E.int 0 ), ( "b", E.string v2 ), ( "c", E.string v3 ) ]


type10 : Encoder A.Type10
type10 =
    \v1 ->
        case v1 of
            A.Type10 v2 v3 v4 v5 v6 v7 v8 v9 v10 v11 ->
                E.object [ ( "a", E.int 0 ), ( "b", E.string v2 ), ( "c", E.string v3 ), ( "d", E.string v4 ), ( "e", E.string v5 ), ( "f", E.string v6 ), ( "g", E.string v7 ), ( "h", E.string v8 ), ( "i", E.string v9 ), ( "j", E.string v10 ), ( "k", E.string v11 ) ]


record0 : Encoder A.Record0
record0 =
    \v1 -> E.object []


record1 : Encoder A.Record1
record1 =
    \v1 ->
        E.object
            [ ( "a"
              , E.string v1.a
              )
            ]


record2 : Encoder A.Record2
record2 =
    \v1 ->
        E.object
            [ ( "a"
              , E.string v1.a
              )
            , ( "b"
              , E.string v1.b
              )
            ]


record10 : Encoder A.Record10
record10 =
    \v1 ->
        E.object
            [ ( "a"
              , E.string v1.a
              )
            , ( "b"
              , E.string v1.b
              )
            , ( "c"
              , E.string v1.c
              )
            , ( "d"
              , E.string v1.d
              )
            , ( "e"
              , E.string v1.e
              )
            , ( "f"
              , E.string v1.f
              )
            , ( "g"
              , E.string v1.g
              )
            , ( "h"
              , E.string v1.h
              )
            , ( "i"
              , E.string v1.i
              )
            , ( "j"
              , E.string v1.j
              )
            ]


typeQualified : Encoder A.TypeQualified
typeQualified =
    Sample2.Encode.sampleType2


typeQualifiedViaAlias : Encoder A.TypeQualifiedViaAlias
typeQualifiedViaAlias =
    identity


typeUnqualified : Encoder A.TypeUnqualified
typeUnqualified =
    identity


sampleType : Encoder comparable -> (Encoder b -> (Encoder c -> Encoder (A.SampleType comparable b c)))
sampleType comparable b c =
    \v1 ->
        case v1 of
            A.Foo ->
                E.object [ ( "a", E.int 0 ) ]

            A.Bar v2 ->
                E.object [ ( "a", E.int 1 ), ( "b", E_.tuple3 comparable b c v2 ) ]

            A.Bas v2 v3 v4 ->
                E.object
                    [ ( "a", E.int 2 )
                    , ( "b"
                      , (\v5 ->
                            E.object
                                [ ( "a"
                                  , comparable v5.a
                                  )
                                ]
                        )
                            v2
                      )
                    , ( "c"
                      , (\v5 ->
                            E.object
                                [ ( "b"
                                  , b v5.b
                                  )
                                ]
                        )
                            v3
                      )
                    , ( "d"
                      , (\v5 ->
                            E.object
                                [ ( "c"
                                  , c v5.c
                                  )
                                ]
                        )
                            v4
                      )
                    ]


sampleRecord : Encoder comparable -> (Encoder b -> (Encoder c -> Encoder (A.SampleRecord comparable b c)))
sampleRecord comparable b c =
    \v1 ->
        E.object
            [ ( "unit"
              , E_.unit v1.unit
              )
            , ( "bool"
              , E.bool v1.bool
              )
            , ( "int"
              , E.int v1.int
              )
            , ( "float"
              , E.float v1.float
              )
            , ( "char"
              , E_.char v1.char
              )
            , ( "string"
              , E.string v1.string
              )
            , ( "list"
              , E.list comparable v1.list
              )
            , ( "array"
              , E.array comparable v1.array
              )
            , ( "maybe"
              , E_.maybe comparable v1.maybe
              )
            , ( "result"
              , E_.result comparable b v1.result
              )
            , ( "set"
              , E.set comparable v1.set
              )
            , ( "dict"
              , E_.dict comparable b v1.dict
              )
            , ( "tuple"
              , E_.tuple comparable b v1.tuple
              )
            , ( "tuple3"
              , E_.tuple3 comparable b c v1.tuple3
              )
            , ( "record"
              , (\v2 ->
                    E.object
                        [ ( "a"
                          , comparable v2.a
                          )
                        , ( "b"
                          , b v2.b
                          )
                        , ( "c"
                          , c v2.c
                          )
                        ]
                )
                    v1.record
              )
            ]
